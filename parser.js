/*!
 * http-utils
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Content_Type: peg$parseContent_Type },
        peg$startRuleFunction  = peg$parseContent_Type,

        peg$c0 = /^[A-Za-z]/,
        peg$c1 = { type: "class", value: "[A-Za-z]", description: "[A-Za-z]" },
        peg$c2 = "0",
        peg$c3 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c4 = "1",
        peg$c5 = { type: "literal", value: "1", description: "\"1\"" },
        peg$c6 = /^[\x01-]/,
        peg$c7 = { type: "class", value: "[\\x01-]", description: "[\\x01-]" },
        peg$c8 = /^[\r]/,
        peg$c9 = { type: "class", value: "[\\r]", description: "[\\r]" },
        peg$c10 = peg$FAILED,
        peg$c11 = /^[\0-\x1F]/,
        peg$c12 = { type: "class", value: "[\\0-\\x1F]", description: "[\\0-\\x1F]" },
        peg$c13 = /^[0-9]/,
        peg$c14 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c15 = "\"",
        peg$c16 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c17 = "A",
        peg$c18 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c19 = "B",
        peg$c20 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c21 = "C",
        peg$c22 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c23 = "D",
        peg$c24 = { type: "literal", value: "D", description: "\"D\"" },
        peg$c25 = "E",
        peg$c26 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c27 = "F",
        peg$c28 = { type: "literal", value: "F", description: "\"F\"" },
        peg$c29 = "\t",
        peg$c30 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c31 = "\n",
        peg$c32 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c33 = [],
        peg$c34 = /^[\0-\xFF]/,
        peg$c35 = { type: "class", value: "[\\0-\\xFF]", description: "[\\0-\\xFF]" },
        peg$c36 = " ",
        peg$c37 = { type: "literal", value: " ", description: "\" \"" },
        peg$c38 = /^[!-~]/,
        peg$c39 = { type: "class", value: "[!-~]", description: "[!-~]" },
        peg$c40 = function(name) {
          return name.toLowerCase()
        },
        peg$c41 = ".",
        peg$c42 = { type: "literal", value: ".", description: "\".\"" },
        peg$c43 = "+",
        peg$c44 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c45 = "!",
        peg$c46 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c47 = "#",
        peg$c48 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c49 = "$",
        peg$c50 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c51 = "&",
        peg$c52 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c53 = "-",
        peg$c54 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c55 = "^",
        peg$c56 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c57 = "_",
        peg$c58 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c59 = "%",
        peg$c60 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c61 = "'",
        peg$c62 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c63 = "*",
        peg$c64 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c65 = "`",
        peg$c66 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c67 = "|",
        peg$c68 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c69 = "~",
        peg$c70 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c71 = function(text) {
          return text.join('')
        },
        peg$c72 = /^[!#-[\]-~]/,
        peg$c73 = { type: "class", value: "[!#-[\\]-~]", description: "[!#-[\\]-~]" },
        peg$c74 = /^[\x80-\xFF]/,
        peg$c75 = { type: "class", value: "[\\x80-\\xFF]", description: "[\\x80-\\xFF]" },
        peg$c76 = "(",
        peg$c77 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c78 = ")",
        peg$c79 = { type: "literal", value: ")", description: "\")\"" },
        peg$c80 = /^[!-'*-[\]-~]/,
        peg$c81 = { type: "class", value: "[!-'*-[\\]-~]", description: "[!-'*-[\\]-~]" },
        peg$c82 = "\\",
        peg$c83 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c84 = function(char) {
          return char
        },
        peg$c85 = ":",
        peg$c86 = { type: "literal", value: ":", description: "\":\"" },
        peg$c87 = function(field) {
          return field.toLowerCase()
            .replace(/(^|-)[a-z]/g, function (c) { return c.toUpperCase() })
        },
        peg$c88 = null,
        peg$c89 = "/",
        peg$c90 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c91 = function(type, subtype, parameters) {
          return {
            type: type,
            subtype: subtype,
            parameters: parameters || {}
          }
        },
        peg$c92 = "=",
        peg$c93 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c94 = function(key, value) {
          return [key, value]
        },
        peg$c95 = ";",
        peg$c96 = { type: "literal", value: ";", description: "\";\"" },
        peg$c97 = void 0,
        peg$c98 = "q=",
        peg$c99 = { type: "literal", value: "q=", description: "\"q=\"" },
        peg$c100 = function(param) { return param },
        peg$c101 = function(params) {
          var parameters = {}

          for (var i = 0, length = params.length; i < length; i++) {
            var param = params[i]
            var name = param[0].toLowerCase()
            var value = param[1]

            if (!(name in parameters)) {
              parameters[name] = value
            }
          }

          return parameters
        },
        peg$c102 = function(weight) {
          return weight
        },
        peg$c103 = function() {
          return Number(text())
        },
        peg$c104 = function(accept, list) {
          list.unshift(accept)

          return list
        },
        peg$c105 = ",",
        peg$c106 = { type: "literal", value: ",", description: "\",\"" },
        peg$c107 = function(range) {
          return range
        },
        peg$c108 = function(range, params) {
          for (var key in params) {
            if (!(key in range)) {
              range[key] = params[key]
            }
          }

          range.extensions = range.extensions || {}

          if (!('weight' in range)) {
            range.weight = 1
          }

          return range
        },
        peg$c109 = function(mediaRange, params) {
          mediaRange.parameters = params || {}

          return mediaRange
        },
        peg$c110 = "*/*",
        peg$c111 = { type: "literal", value: "*/*", description: "\"*/*\"" },
        peg$c112 = function() {
          return {
            type: "*",
            subtype: "*"
          }
        },
        peg$c113 = function(type, subtype) {
          return {
            type: type,
            subtype: subtype
          }
        },
        peg$c114 = function(weight, exts) {
          var extensions = {}

          for (var i = 0, length = exts.length; i < length; i++) {
            var ext = exts[i]
            var name = ext[0]
            var value = ext[1]

            if (!(name in extensions)) {
              extensions[name] = value
            }
          }

          return {
            weight: weight,
            extensions: extensions
          }
        },
        peg$c115 = function(name, value) {
          return [name, (value || undefined)]
        },
        peg$c116 = function(value) {
          return value
        },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseALPHA() {
      var s0;

      if (peg$c0.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parseBIT() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 49) {
          s0 = peg$c4;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
      }

      return s0;
    }

    function peg$parseCHAR() {
      var s0;

      if (peg$c6.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseCR() {
      var s0;

      if (peg$c8.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseCRLF() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLF();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseCTL() {
      var s0;

      if (peg$c11.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c13.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }

      return s0;
    }

    function peg$parseDQUOTE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c15;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      s0 = peg$parseDIGIT();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 65) {
          s0 = peg$c17;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 66) {
            s0 = peg$c19;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 67) {
              s0 = peg$c21;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 68) {
                s0 = peg$c23;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 69) {
                  s0 = peg$c25;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 70) {
                    s0 = peg$c27;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHTAB() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }

      return s0;
    }

    function peg$parseLF() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseLWSP() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$parseWSP();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseCRLF();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWSP();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c10;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c10;
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWSP();
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseCRLF();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseWSP();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c10;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c10;
          }
        }
      }

      return s0;
    }

    function peg$parseOCTET() {
      var s0;

      if (peg$c34.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }

      return s0;
    }

    function peg$parseSP() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c36;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }

      return s0;
    }

    function peg$parseVCHAR() {
      var s0;

      if (peg$c38.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }

      return s0;
    }

    function peg$parseWSP() {
      var s0;

      s0 = peg$parseSP();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHTAB();
      }

      return s0;
    }

    function peg$parsetype_name() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parserestricted_name();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesubtype_name() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parserestricted_name_first();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parserestricted_name_chars();
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c41;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c43;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
          }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parserestricted_name_chars();
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c41;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s5 = peg$c43;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c10;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c10;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserestricted_name() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parserestricted_name_first();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parserestricted_name_chars();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parserestricted_name_chars();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c10;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserestricted_name_first() {
      var s0;

      s0 = peg$parseDIGIT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseALPHA();
      }

      return s0;
    }

    function peg$parserestricted_name_chars() {
      var s0;

      s0 = peg$parseALPHA();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDIGIT();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c45;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 35) {
              s0 = peg$c47;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 36) {
                s0 = peg$c49;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c50); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 38) {
                  s0 = peg$c51;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c52); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s0 = peg$c53;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c54); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 94) {
                      s0 = peg$c55;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c56); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 95) {
                        s0 = peg$c57;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c58); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetoken() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsetchar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsetchar();
        }
      } else {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetchar() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c45;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s0 = peg$c47;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 36) {
            s0 = peg$c49;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s0 = peg$c59;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 38) {
                s0 = peg$c51;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s0 = peg$c61;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s0 = peg$c63;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s0 = peg$c43;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s0 = peg$c53;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c54); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s0 = peg$c41;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c42); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 94) {
                            s0 = peg$c55;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c56); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                              s0 = peg$c57;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c58); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 96) {
                                s0 = peg$c65;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 124) {
                                  s0 = peg$c67;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 126) {
                                    s0 = peg$c69;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseDIGIT();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseALPHA();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequoted_string() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseqdtext();
        if (s3 === peg$FAILED) {
          s3 = peg$parsequoted_pair();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseqdtext();
          if (s3 === peg$FAILED) {
            s3 = peg$parsequoted_pair();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c71(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseqdtext() {
      var s0;

      s0 = peg$parseHTAB();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSP();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobs_text();
          if (s0 === peg$FAILED) {
            if (peg$c72.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c73); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseobs_text() {
      var s0;

      if (peg$c74.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c76;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsectext();
        if (s3 === peg$FAILED) {
          s3 = peg$parsequoted_pair();
          if (s3 === peg$FAILED) {
            s3 = peg$parsecomment();
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsectext();
          if (s3 === peg$FAILED) {
            s3 = peg$parsequoted_pair();
            if (s3 === peg$FAILED) {
              s3 = peg$parsecomment();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c78;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parsectext() {
      var s0;

      s0 = peg$parseHTAB();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSP();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobs_text();
          if (s0 === peg$FAILED) {
            if (peg$c80.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c81); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequoted_pair() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c82;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseHTAB();
        if (s3 === peg$FAILED) {
          s3 = peg$parseSP();
          if (s3 === peg$FAILED) {
            s3 = peg$parseVCHAR();
            if (s3 === peg$FAILED) {
              s3 = peg$parseobs_text();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c84(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseOWS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSP();
      if (s2 === peg$FAILED) {
        s2 = peg$parseHTAB();
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSP();
        if (s2 === peg$FAILED) {
          s2 = peg$parseHTAB();
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRWS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSP();
      if (s2 === peg$FAILED) {
        s2 = peg$parseHTAB();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseSP();
          if (s2 === peg$FAILED) {
            s2 = peg$parseHTAB();
          }
        }
      } else {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseheader_field() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsefield_name();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c85;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefield_value();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOWS();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c10;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c10;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parsefield_name() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetoken();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c87(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefield_value() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsefield_content();
      if (s1 === peg$FAILED) {
        s1 = peg$parseobs_fold();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsefield_content();
        if (s1 === peg$FAILED) {
          s1 = peg$parseobs_fold();
        }
      }

      return s0;
    }

    function peg$parsefield_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsefield_vchar();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseSP();
        if (s4 === peg$FAILED) {
          s4 = peg$parseHTAB();
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSP();
            if (s4 === peg$FAILED) {
              s4 = peg$parseHTAB();
            }
          }
        } else {
          s3 = peg$c10;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefield_vchar();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c10;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c10;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c88;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parsefield_vchar() {
      var s0;

      s0 = peg$parseVCHAR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseobs_text();
      }

      return s0;
    }

    function peg$parseobs_fold() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCRLF();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSP();
        if (s3 === peg$FAILED) {
          s3 = peg$parseHTAB();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSP();
            if (s3 === peg$FAILED) {
              s3 = peg$parseHTAB();
            }
          }
        } else {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parsemedia_type() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetype_name();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c89;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubtype_name();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseparameters();
            if (s4 === peg$FAILED) {
              s4 = peg$c88;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c91(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c10;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseparameter() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetoken();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c92;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetoken();
          if (s3 === peg$FAILED) {
            s3 = peg$parsequoted_string();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c94(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseparameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseOWS();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c95;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOWS();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c98) {
              s7 = peg$c98;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c97;
            } else {
              peg$currPos = s6;
              s6 = peg$c10;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseparameter();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c100(s7);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c10;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c10;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c10;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c10;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c10;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s4 = peg$c95;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c96); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOWS();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 2) === peg$c98) {
                  s7 = peg$c98;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c99); }
                }
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c97;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c10;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseparameter();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c100(s7);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c10;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c10;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c10;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c10;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c10;
          }
        }
      } else {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c101(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseContent_Type() {
      var s0;

      s0 = peg$parsemedia_type();

      return s0;
    }

    function peg$parseweight() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseOWS();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c95;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c98) {
              s4 = peg$c98;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseqvalue();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c102(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c10;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c10;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseqvalue() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c41;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDIGIT();
          if (s5 === peg$FAILED) {
            s5 = peg$c88;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseDIGIT();
            if (s6 === peg$FAILED) {
              s6 = peg$c88;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDIGIT();
              if (s7 === peg$FAILED) {
                s7 = peg$c88;
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c10;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c10;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c10;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c10;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c88;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c10;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c10;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 49) {
          s2 = peg$c4;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c41;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 48) {
              s5 = peg$c2;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c88;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 48) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c88;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 48) {
                  s7 = peg$c2;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c88;
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c10;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c10;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c10;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c10;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c88;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c10;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c10;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c103();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAccept() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAccept_Leading();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAccept_List();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAccept_List();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c104(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseAccept_Leading() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c105;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOWS();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c10;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c10;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c105;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOWS();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c10;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c10;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAccept_Media();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c107(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseAccept_Media() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsemedia_range();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseaccept_params();
        if (s2 === peg$FAILED) {
          s2 = peg$c88;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c108(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseAccept_List() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOWS();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c105;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAccept_Range();
          if (s3 === peg$FAILED) {
            s3 = peg$c88;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c107(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseAccept_Range() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOWS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAccept_Media();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c107(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parsemedia_range() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsemedia_range_type();
      if (s1 === peg$FAILED) {
        s1 = peg$parsemedia_range_any();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparameters();
        if (s2 === peg$FAILED) {
          s2 = peg$c88;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c109(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parsemedia_range_any() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c110) {
        s1 = peg$c110;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c112();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemedia_range_type() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetype_name();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c89;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s3 = peg$c63;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsesubtype_name();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c113(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseaccept_params() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseweight();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseaccept_ext();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseaccept_ext();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c114(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseaccept_ext() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseOWS();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c95;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetoken();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseaccept_ext_value();
              if (s5 === peg$FAILED) {
                s5 = peg$c88;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c115(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c10;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c10;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseaccept_ext_value() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c92;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetoken();
        if (s2 === peg$FAILED) {
          s2 = peg$parsequoted_string();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c116(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseyear() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDIGIT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDIGIT();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDIGIT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c103();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c10;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c10;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c10;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c10;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
